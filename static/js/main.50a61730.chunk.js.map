{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","App","state","errorMessage","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","src_SeasonDisplay_0","src_Spinner","renderContent","React","Component","defaultProps","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAGMA,SAAe,CACjBC,OAAQ,CACJC,KAAM,sBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,kBACNC,SAAS,eA2BFE,EAfO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARpC,GAAKH,EAAQ,EACbD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIHK,EAEFZ,EAAaS,GAAhCP,EAFqBU,EAErBV,KAAMC,EAFeS,EAEfT,SAId,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAC9BI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBd,EAAvB,WACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,aCtBTe,EARC,SAACZ,GACb,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,IAAsCV,EAAMa,WCAlDC,6MAEFC,MAAQ,CAAEd,IAAK,KAAMe,aAAc,uFAEhB,IAAAC,EAAAC,KACfC,OAAOC,UAAUC,YAAYC,mBACzB,SAAAC,GAAQ,OAAIN,EAAKO,SAAS,CAACvB,IAAKsB,EAASE,OAAOC,YAChD,SAAAC,GAAG,OAAIV,EAAKO,SAAS,CAACR,aAAcW,EAAId,oDAK5C,OAAIK,KAAKH,MAAMC,eAAiBE,KAAKH,MAAMd,IAEnCM,EAAAC,EAAAC,cAAA,6BACoBS,KAAKH,MAAMC,eAKlCE,KAAKH,MAAMC,cAAgBE,KAAKH,MAAMd,IAC/BM,EAAAC,EAAAC,cAACmB,EAAD,CAAe3B,IAAKiB,KAAKH,MAAMd,MAIvCM,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoB,EAAD,CAAShB,QAAQ,qEAOzB,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACTQ,KAAKY,wBAnCLC,IAAMC,WA0CxBpB,EAAQqB,aAAe,CACnBpB,QAAS,WAGbqB,IAASC,OACL5B,EAAAC,EAAAC,cAAC2B,EAAD,MACAC,SAASC,cAAc","file":"static/js/main.50a61730.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    summer: {\n        text: \"let's hit the beach\",\n        iconName: 'sun'\n    },\n    winter: {\n        text: \"Burr it is cold\",\n        iconName:'snowflake'\n    }\n};\n\nconst getSeason = (lat, month) => {\n    if (month >2 && month < 9){\n        return lat > 0 ? 'summer' : 'winter';\n    } else{\n        return lat > 0 ? 'winter' : 'summer';\n    }\n};\n\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];\n    // const icon = season === 'winter' ? 'snowflake' : 'sun';\n    // // console.log(season);\n    // const text = season==='winter' ? 'Burr, it is chilly' : 'lets hit the beach';\n    return(\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className={`icon-right massive ${iconName} icon`} />\n        </div>\n    );\n};\n\nexport default SeasonDisplay;","import React from 'react';\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\"> {props.message}</div>\n        </div>\n    );\n};\n\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\nclass App extends React.Component {\n\n    state = { lat: null, errorMessage: '' };\n\n    componentDidMount(){\n        window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({lat: position.coords.latitude}),\n            err => this.setState({errorMessage: err.message})            \n        );\n    }\n\n    renderContent() {\n        if (this.state.errorMessage && !this.state.lat) {\n            return (\n                <div>                    \n                    error Message: {this.state.errorMessage}\n                </div>\n            );\n        }\n\n        if (!this.state.errorMessage && this.state.lat) {\n            return (<SeasonDisplay lat={this.state.lat}/>);\n        }\n\n        return (\n            <div>\n                <Spinner message=\"Please accept location request\" />\n            </div>\n        );\n\n    }\n\n    render() {\n        return (\n            <div className=\"border red\">\n                { this.renderContent() }\n            </div>\n        );\n    };\n\n}\n\nSpinner.defaultProps = {\n    message: 'loading'\n};\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n);"],"sourceRoot":""}